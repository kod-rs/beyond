==================== Internal API ===============================================
* Communication will be done over HTTP, SSL may be included.
* Messages will be HTTP GET and POST requests and responses.
* The requested data will be JSON formatted.
* Communication will be bidirectional.
* Note: For readability purposes, all the messages are given a symbolic name.
* Message names are:
    - Direction: Frontend to Backend
        - LOGIN_REQUEST
        - BUILDINGS_BY_USR_ID_REQUEST
        - BUILDING_INFO_REQUEST
        - FLEXIBILITY_DEMAND_REQUEST
        - ALGORITHM_REQUEST
        - FLEXIBILITY_OFFER_CONFIRMATION_REQUEST
    - Direction: Backend to Frontend
        - LOGIN_RESPONSE
        - BUILDINGS_BY_USR_ID_RESPONSE
        - BUILDING_INFO_RESPONSE
        - FLEXIBILITY_DEMAND_RESPONSE
        - ALGORITHM_RESPONSE
        - FLEXIBILITY_OFFER_CONFIRMATION_RESPONSE
================= Frontend to backend =========================================
* LOGIN_REQUEST:
    - URL: base_url/login/
    - POST request to backend.
    - Getting the login data for a user.
    - Frontend will send an HTTP post request
        containing the following JSON object:
        {
            "type": "login_request",
            "username": String,
            "password": String
        }
* BUILDINGS_BY_USR_ID_REQUEST:
    - URL: base_url/buildings/
    - POST request to backend.
    - Getting all the buildings for a specific user.
    - Frontend will send an HTTP post request
        containing the following JSON object:
        {
            "type": "buildings_by_user_id_request",
            "user_id": String
        }
* BUILDING_INFO_REQUEST:
    - URL: base_url/buildings/
    - POST request to backend.
    - Getting all the power consumption information for specific buildings.
    - Frontend will send an HTTP post request
        containing the following JSON object:
        {
            "type": "building_info_request",
            "building_ids": Array of Strings
        }
    - Note: Assumption made is that the building ID will be a unique string.

* FLEXIBILITY_DEMAND_REQUEST
    - URL: base_url/flexibility_demand/
    - Request to backend.
    - Frontend will send an HTTP post request
        containing the following JSON object:
        {
            "type": "flexibility_demand_request",
            "date": String convertible to RFC 3339 format
        }

* ALGORITHM_REQUEST
    - URL: base_url/algorithm/
    - Request to backend.
    - Frontend will send an HTTP post request
        containing the following JSON object:
        {
            "type": "algorithm_request",
            "building_energy_list": Array of BUILDING_ENERGY,
            "flexibility_demands": Array of FLEXIBILITY_DEMAND
        },
        where FLEXIBILITY_DEMAND is defined as:
            {
                "interval": {
                    "from": Timestamp convertible to RFC 3339 format
                    "to": Timestamp convertible to RFC 3339 format
                 },
                "flexibility_amount": Number,
            }
            where BUILDING_ENERGY is defined as:
                {
                    "building_id": String,
                    "energy_info": Array of TIMESERIES
                },
                where TIMESERIES is defined as:
                    {
                        "timestamp": String convertible to RFC 3339 format,
                        "value": Number
                    }
    - an example:
        {
            "type": "algorithm_request",
            "building_energy_list": [
                {"building_id": "building_1",
                 "energy_info": [
                    {"timestamp": "2022-11-04T13:40:07.928829+00:00",
                      "value": 42.3},
                    {"timestamp": "2022-11-04T13:45:07.928829+00:00",
                     "value": 44.3}]
               },
               {"building_id": "building_2",
                "energy_info": [
                    {"timestamp": "2022-11-04T13:40:07.928829+00:00",
                     "value": 52.3},
                    {"timestamp": "2022-11-04T13:45:07.928829+00:00",
                     "value": 64.3}]
                }
           ],
           "flexibility_demands": [
                {
                   "interval": {
                        "from": 2022-11-04T13:00:00.000000+00:00,
                        "to": 2022-11-04T17:00:00.000000+00:00
                    },
                    "flexibility_amount": 88
                },
                {
                   "interval": {
                        "from": 2022-11-04T17:00:00.000000+00:00,
                        "to": 2022-11-04T19:00:00.000000+00:00
                    },
                    "flexibility_amount": 77
                }
           ]
        }
* FLEXIBILITY_OFFER_CONFIRMATION_REQUEST
    - URL: base_url/flexibility_offer_confirmation/
    - Request to backend.
    - Frontend will send an HTTP post request
        containing the following JSON object:
        {
            "type": "flexibility_offer_confirmation_request",
            "user_id": String,
            "algorithm_response": JSON object received in
                ALGORITHM_RESPONSE message. See ALGORITHM_RESPONSE for more
                information.
                *Important*: Either the whole array of OFFERS can be saved,
                or the OFFERS array can contain only the offers that the
                user wants to save, i.e., other offers can be removed from the
                OFFERS array found in the the above-mentioned
                ALGORITHM_RESPONSE.
        }
================= Backend to Frontend =========================================
* GENERIC FAILURE RESPONSE:
    - If for any reason a failure happens during request handling,
        the following message will be sent:
         {
            "type": defined by request that was being handled
                    (for example, "login_response",
            "status": False,
            "message": String describing the error
        },

* LOGIN_RESPONSE:
    - POST response to frontend.
    - Sending the login data for a user.
    - IF THE LOGIN IS SUCCESSFUL, the Backend will send an HTTP post response
        containing the following JSON object:
        {
            "type": "login_response",
            "status": True,
            "user_id": String,
            "username": String,
            "role": either "AGGREGATOR" or "MANAGER" String,
            "access_token": String
        }
* BUILDINGS_BY_USR_ID_RESPONSE:
    - POST response to backend.
    - Once Frontend sends a BUILDINGS_BY_USR_ID_REQUEST, this message
        is expected as a response:
        {
            "type": "buildings_by_user_id_response",
            "buildings": Array of BUILDING type
        }
    - BUILDING type has the following structure:
        {
            "building_id": String,
            "building_name": String,
            "latitude": Number,
            "longitude": Number
        }
* BUILDING_INFO_RESPONSE:
    - POST response to 'FlexOpt_uri/'
    - Once FlexOpt sends a BUILDING_INFO_REQUEST, this message
        is expected as a response:
        {
            "type": "building_info_response",
            "buildings_info": Array of BUILDING_INFO
        }
    - BUILDING_INFO type has the following structure:
        {
            "building_id": String,
            "energy_info": Array of TIMESERIES type
        }
        , where TIMESERIES type has the following structure:
            {
                "value": Number [Wh],
                "timestamp": Timestamp convertible to RFC 3339 format
            }

* FLEXIBILITY_DEMAND_RESPONSE
    - POST response to Frontend.
    - Once Frontend sends a FLEXIBILITY_DEMAND_REQUEST, this message
        is expected as a response:
        {
            "type": "flexibility_demand_response",
            "demands": Array of FLEXIBILITY_DEMAND
        },
        where FLEXIBILITY_DEMAND is:
            {
                "start_time": String convertible to RFC 3339 format,
                "end_time": String convertible to RFC 3339 format,
                "flexibility": Number
            }
* ALGORITHM_RESPONSE
    - POST response to Frontend.
    - Once Frontend sends a ALGORITHM_REQUEST, this message
        is expected as a response:
        {
            "type": "algorithm_response",
            "status": True,
            "offers": Array of OFFER
        },
        where OFFER is:
            {
                "offered_flexibility": Number,
                "requested_flexibility": Number sent via ALGORITHM_REQUEST
                "interval": {
                        "from": String convertible to RFC 3339 format
                        "to": String convertible to RFC 3339 format
                },
                "building_info": Array of BUILDING_INFO
            }
            where BUILDING_INFO is:
                {
                    "building_id": String,
                    "interval": {
                        "from": String convertible to RFC 3339 format
                        "to": String convertible to RFC 3339 format
                    },
                    "flexibility": Number
                }
* FLEXIBILITY_OFFER_CONFIRMATION_RESPONSE
    - POST response to Frontend.
    - Once Frontend sends a FLEXIBILITY_OFFER_CONFIRMATION_REQUEST,
        this message is expected as a response:
        {
            "type": "flexibility_offer_confirmation_response",
            "status": True if the save was successful, False otherwise
        }
