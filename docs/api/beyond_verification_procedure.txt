The signature procedure roughly consist of the following steps:
 - Beyond generates a pair of keys (private and public key)
 - FlexOpt generates a pair of keys (private and public key)
 - Public keys are exchanged via means external to this API and the standard
   communication of the sender and the receiver. For example, via e-mails prior
   to the communication initialization between Beyond and FlexOpt.
 - Once a sender, be it either Beyond of FlexOpt, decides to send a request
   to the receiver, it will sign the data with their own private key.
 - (Data + signature) is sent to the other side
 - Using the public key of the sender, the signature is verified
 - If the signature is successfully verified, the data will be processed. If
   not, an appropriate message will be sent. That message will be a false
   status message as defined by "beyond_external_api.txt".
 - Upon processing a verified message, a response will be sent. The response
   shall also be digitally signed - now by the other side. The procedure is
   the same as the previously described. Using own private key, 
   the responder will sign the hash included in the message and send it.
 - The original sender then veirifes the message, and if successful, 
   processes the response.

These steps are defined in more detail below.

Two approaches are given:
- Using OpenSSL
- Using custom scripts developed in Python (crypto.py file)

Key generation
===============

To generate a key pair, the following OpenSSL commands can be used:

- openssl genrsa -out priv.key 2048
- openssl rsa -in priv.key -pubout -out pub.key

With those two commands, two files will be generated:

- "priv.key" : containing the private key
- "pub.key" : containing the public key

Or in Python:

    sender_private_key, sender_public_key = generate_key_pair()

    parent_dir = Path(__file__).resolve().parent
    save_keys(get_private_bytes(sender_private_key),
              get_public_key_bytes(sender_public_key),
              dir_name=parent_dir / 'example_keys')

Key examples can be found in the directory ./example_keys"
Those keys will be used to illustrate the rest of the procedure.

Private key used to sign the data:

-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwg...

Public key used to verify the data:

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A...


Key exchange
============

Before communication initialization between Beyond and FlexOpt and after
generating the keys, the public keys will be exchanged. Upon receiving the
public keys, those public keys will be made available to their respective
system for further use in the verification process.
The exchange and storage process is out of the scope of this API.

Sending a request
===================

Generally speaking, the request messages being sent has the following
structure:

    message = {'type': 'message_type', 'payload': 'message_payload...'}

Firstly it will be converted into string:

    message = "{'type': 'message_type', 'payload': 'message_payload...'}"

Then, it will be "utf-8" encoded:

    message = b"{'type': 'message_type', 'payload': 'message_payload...'}"

For illustration purposes, the message will be saved into send.msg in "utf-8"
encoded format.

To sign the message, the following OpenSSL command can be used:

- openssl dgst -sha256 -sigopt rsa_padding_mode:pss -sign priv.key -out signed.msg send.msg

*Important to note*: Must use "sigopt rsa_padding_mode:pss"

That will generate a file signed.msg.
That file may look something like this:

b'\n\x0b\x9a\xb3;\x905\xff\xd5 \x....

Before sending, the above-mentioned signature will be turned into hex data:

0a0b9ab33b9035ffd520dd9....

Finally, the JSON message being sent will have the following structure:

    {
    'type': 'message_type',
    'payload': 'message_payload...',
    'signature': '0a0b9ab33b9035ffd5...'
    }

Or, in Python:
    data = {'type': 'message_type', 'payload': 'message_payload...'}
    hash_data = sign(sender_private_key, data)
    signed_data = {**data, 'signature': hash_data}

Receiving a request
===================

Upon receiving a request, the message will be split into the original message
and the signature, i.e:
    signature = ''0a0b9ab33b9035ffd...'
    original_message =  {'type': 'message_type', 'payload': 'message_payload...'}

For illustration purposes, the message will be saved into recv.msg in "utf-8"
encoded format and the signature will be saved into sig.file.

To verify the message, the following OpenSSL command can be used:

- openssl dgst -sha256 -sigopt rsa_padding_mode:pss -verify pub.key -signature sig.file recv.msg

If 'OK', the message can be considered verified and further processed.

Or, in Python:
    received = signed_data
    verified = verify_signature(sender_public_key, received)
    print(f'Verified = ', verified)


Sending a response
===================

If the message is verified, a response will be generated.
A generic response has a similar format to the request:


message = {'type': 'response_type', 'payload': 'response_payload...'}

Doing the same procedure as before, a signature is added to the message.
The responder signs the message with his private key, adds the hex value
into the response:

message = {'type': 'response_type', 
           'payload': 'response_payload...',
           'signature':....}
           
Receiving a response
=====================

Upon receiving a response, a verification process is initiated.
If successful, the message is processed.
If not, the response is ignored.

