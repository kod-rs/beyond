==================== Internal API ===============================================
* Communication will be done over HTTP, SSL may be included.
* Messages will be HTTP GET and POST requests and responses.
* The requested data will be JSON formatted.
* Communication will be bidirectional.
* Note: For readability purposes, all the messages are given a symbolic name.
* Message names are:
    - Direction: Frontend to Backend
        - LOGIN_REQUEST
        - BUILDINGS_BY_USR_ID_REQUEST
        - BUILDING_INFO_REQUEST
        - FLEXIBILITY_DEMAND_REQUEST
    - Direction: Backend to Frontend
        - LOGIN_RESPONSE
        - BUILDINGS_BY_USR_ID_RESPONSE
        - BUILDING_INFO_RESPONSE
        - FLEXIBILITY_DEMAND_RESPONSE
================= Frontend to backend =========================================
* LOGIN_REQUEST:
    - POST request to backend.
    - Getting the login data for a user.
    - Frontend will send a HTTP post request
        containing the following JSON object:
        {
            "type": "login_request",
            "username": String,
            "password": String
        }
* BUILDINGS_BY_USR_ID_REQUEST:
    - POST request to backend.
    - Getting all the buildings for a specific user.
    - Frontend will send a HTTP post request
        containing the following JSON object:
        {
            "type": "buildings_by_user_id_request",
            "user_id": Number
        }
* BUILDING_INFO_REQUEST:
    - POST request to backend.
    - Getting all the power consumption information for specific buildings.
    - Frontend will send a HTTP post request
        containing the following JSON object:
        {
            "type": "building_info_request",
            "building_ids": Array of Strings
        }
    - Note: Assumption made is that the building ID will be a unique string.

* FLEXIBILITY_DEMAND_REQUEST
    - Request to backend.
    - Frontend will send a HTTP post request
        containing the following JSON object:
        {
            "type": "flexibility_demand_request",
            "user_id": Number,
        }
================= Backend to Frontend =========================================
* LOGIN_RESPONSE:
    - POST response to frontend.
    - Sending the login data for a user.
    - IF THE LOGIN IS SUCCESSFUL, the Backend will send a HTTP post response
        containing the following JSON object:
        {
            "type": "login_response",
            "status": True,
            "user_id": String,
            "access_token": String
        }
    - IF THE LOGIN IS UNSUCCESSFUL, the Backend will send a HTTP post response
        containing the following JSON object:
        {
            "type": "login_response",
            "status": False,
            "message": String describing the failure reason
        }

* BUILDINGS_BY_USR_ID_RESPONSE:
    - POST response to backend.
    - Once Frontend sends a BUILDINGS_BY_USR_ID_REQUEST, this message
        is expected as a response:
        {
            "type": "buildings_by_user_id_response",
            "buildings": Array of BUILDING type
        }
    - BUILDING type has the following structure:
        {
            "building_id": String,
            "building_name": String,
            "latitude": Number,
            "longitude": Number
        }
* BUILDING_INFO_RESPONSE:
    - POST response to backend.
    - Once Frontend sends a BUILDING_INFO_REQUEST, this message
        is expected as a response:
        {
            "type": "building_info_response",
            "buildings_info": Array of BUILDING_INFO
        }
    - BUILDING_INFO type has the following structure:
        {
            "building_id": String,
            "info": Array of TIMESERIES type
        }
        , where TIMESERIES type has the following structure:
            {
                "value": Number [Wh],
                "timestamp": Timestamp convertible to RFC 3339 format
            }

* FLEXIBILITY_DEMAND_RESPONSE
    - POST response to Frontend.
    - Once Frontend sends a FLEXIBILITY_DEMAND_REQUEST, this message
        is expected as a response:
        {
            "type": "flexibility_demand_response",
            "user_id": Number,
            "demands": Array of FLEXIBILITY_DEMAND
        },
        where FLEXIBILITY_DEMAND is:
            {
                "start_time": String convertible to RFC 3339 format,
                "end_time": String convertible to RFC 3339 format,
                "flexibility": Number
            }